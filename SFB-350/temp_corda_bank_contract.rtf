{\rtf1\ansi\ansicpg1251\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red191\green100\blue38;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red109\green109\blue109;\red86\green132\blue173;\red133\green96\blue154;}
{\*\expandedcolortbl;;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c33725\c51765\c67843;\csgenericrgb\c52157\c37647\c60392;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 package \cf4 com.template.com.template.flow\
\
import co.paralleluniverse.fibers.Suspendable\
import com.template.contract.CarContract\
import com.template.model.Car\
import com.template.state.CarState\
import net.corda.confidential.SwapIdentitiesFlow\
import net.corda.core.contracts.*\
import net.corda.core.flows.*\
import net.corda.core.identity.AnonymousParty\
import net.corda.core.identity.Party\
import net.corda.core.identity.PartyAndCertificate\
import net.corda.core.node.services.IdentityService\
import net.corda.core.transactions.LedgerTransaction\
import net.corda.core.transactions.SignedTransaction\
import net.corda.core.transactions.TransactionBuilder\
import net.corda.core.utilities.OpaqueBytes\
import net.corda.core.utilities.ProgressTracker\
import net.corda.core.utilities.unwrap\
import net.corda.finance.contracts.JavaCommercialPaper\
import net.corda.finance.contracts.asset.Cash\
import net.corda.finance.flows.AbstractCashFlow\
import net.corda.finance.flows.CashException\
import net.corda.finance.flows.CashIssueFlow\
import net.corda.finance.flows.CashPaymentFlow\
import net.corda.finance.issuedBy\
import java.security.PublicKey\
import java.util.*\
\
const \cf2 val \cf4 CASH_PROGRAM_ID: ContractClassName = \cf5 \cb3 "com.template.com.template.flow.IOUContract"\
\
\cf6 // *********\
// * Flows *\
// *********\
\
\
\cf2 \cb3 val \cf4 IOU_CONTRACT_ID = \cf5 \cb3 "com.template.com.template.flow."\
\
\
\cf2 \cb3 fun \cf4 <S : FungibleAsset<T>\cf2 , \cf4 T: Any> generateIssue(tx: TransactionBuilder\cf2 ,\
                                                 \cf4 transactionState: TransactionState<S>\cf2 ,\
                                                 \cf4 issueCommand: CommandData): Set<PublicKey> \{\
    check(tx.inputStates().isEmpty())\
    check(tx.outputStates().map \{ it.data \}.filterIsInstance(transactionState.javaClass).isEmpty())\
    require(transactionState.data.amount.quantity > \cf7 \cb3 0\cf4 \cb3 )\
    \cf2 val \cf4 at = transactionState.data.amount.token.issuer\
    \cf2 val \cf4 commandSigner = at.party.owningKey\
    tx.addOutputState(transactionState)\
    tx.addCommand(issueCommand\cf2 , \cf4 commandSigner)\
    \cf2 return \cf4 setOf(commandSigner)\
\}\
\
\
\
@StartableByRPC\
\cf2 class \cf4 CarIssueAndPaymentFlow(\cf2 val \cf4 amount: Amount<Currency>\cf2 ,\
                             val \cf4 issueRef: OpaqueBytes\cf2 ,\
                             val \cf4 recipient: Party\cf2 ,\
                             val \cf4 anonymous: Boolean\cf2 ,\
                             val \cf4 notary: Party\cf2 ,\
                             \cf4 progressTracker: ProgressTracker) : AbstractCashFlow<AbstractCashFlow.Result>(progressTracker)\
\
\{\
\
    constructor(amount: Amount<Currency>\cf2 ,\
                \cf4 issueRef: OpaqueBytes\cf2 ,\
                \cf4 recipient: Party\cf2 ,\
                \cf4 anonymous: Boolean\cf2 ,\
                \cf4 notary: Party) : \cf2 this\cf4 (amount\cf2 , \cf4 issueRef\cf2 , \cf4 recipient\cf2 , \cf4 anonymous\cf2 , \cf4 notary\cf2 , \cf4 tracker())\
\
    companion \cf2 object \cf4 \{\
        \cf2 object \cf4 AWAITING_KEY : ProgressTracker.Step(\cf5 \cb3 "Awaiting key"\cf4 \cb3 )\
\
        \cf2 fun \cf4 tracker() = ProgressTracker(AWAITING_KEY)\
        \cf2 fun \cf4 validateAndRegisterIdentity(identityService: IdentityService\cf2 , \cf4 otherSide: Party\cf2 , \cf4 anonymousOtherSide: PartyAndCertificate): PartyAndCertificate \{\
            require(anonymousOtherSide.name == otherSide.name)\
            \cf6 \cb3 // Validate then store their identity so that we can prove the key in the transaction is owned by the\
            // counterparty.\
            \cf4 \cb3 identityService.verifyAndRegisterIdentity(anonymousOtherSide)\
            \cf2 return \cf4 anonymousOtherSide\
        \}\
    \}\
\
\
    override \cf2 fun \cf4 call(): Result \{\
        progressTracker.currentStep = GENERATING_TX\
        \cf2 val \cf4 builder = TransactionBuilder(notary)\
        \cf2 val \cf4 issuer = ourIdentity.ref(issueRef)\
\
        \cf2 var \cf4 am : Amount<Issued<Currency>> =amount.issuedBy(issuer)\
        \cf2 var \cf4 transstate = TransactionState(Cash.State(am\cf2 , \cf4 ourIdentity)\cf2 ,\cf4 CASH_PROGRAM_ID\cf2 ,\cf4 notary)\
        \cf2 var \cf4 signers =  generateIssue(builder\cf2 , \cf4 transstate\cf2 , \cf4 JavaCommercialPaper.Commands.Issue())\
\
        progressTracker.currentStep = SIGNING_TX\
        \cf2 val \cf4 tx = serviceHub.signInitialTransaction(builder\cf2 , \cf4 signers)\
\
        \cf2 val \cf4 notarised = finaliseTx(tx\cf2 , \cf4 emptySet()\cf2 , \cf5 \cb3 "Unable to notarise issue"\cf4 \cb3 )\
             \cf6 \cb3 // <-- end first flow\
\
        \cf4 \cb3 progressTracker.currentStep = GENERATING_ID\
\
        \cf2 val \cf4 identities = LinkedHashMap<Party\cf2 , \cf4 AnonymousParty>()\
        \cf2 val \cf4 txIdentities = \cf2 if \cf4 (anonymous) \{\
\
            \cf8 \cb3 progressTracker\cf4 \cb3 .\cf8 \cb3 currentStep \cf4 \cb3 = SwapIdentitiesFlow.Companion.AWAITING_KEY\
            \cf2 val \cf4 legalIdentityAnonymous = \cf8 \cb3 serviceHub\cf4 \cb3 .\cf8 \cb3 keyManagementService\cf4 \cb3 .freshKeyAndCert(\cf8 \cb3 ourIdentityAndCert\cf2 \cb3 ,false\cf4 )\
\
            \cf6 \cb3 // Special case that if we're both parties, a single identity is generated\
\
            \cf2 \cb3 if \cf4 (\cf8 \cb3 serviceHub\cf4 \cb3 .\cf8 \cb3 myInfo\cf4 \cb3 .isLegalIdentity(\cf8 \cb3 recipient\cf4 \cb3 )) \{\
                identities.put(\cf8 \cb3 recipient\cf2 \cb3 , \cf4 legalIdentityAnonymous.\cf8 \cb3 party\cf4 \cb3 .anonymise())\
            \} \cf2 else \cf4 \{\
                \cf2 val \cf4 otherSession = initiateFlow(recipient)\
                \cf2 val \cf4 anonymousOtherSide = otherSession.sendAndReceive<PartyAndCertificate>(legalIdentityAnonymous).unwrap \{ confidentialIdentity ->\
                    SwapIdentitiesFlow.validateAndRegisterIdentity(serviceHub.identityService\cf2 , \cf4 otherSession.counterparty\cf2 , \cf4 confidentialIdentity)\
                \}\
                identities.put(ourIdentity\cf2 , \cf4 legalIdentityAnonymous.party.anonymise())\
                identities.put(otherSession.counterparty\cf2 , \cf4 anonymousOtherSide.party.anonymise())\
            \}\
        \} \cf2 else \cf4 \{\
            emptyMap<Party\cf2 , \cf4 AnonymousParty>()\
        \}\
\
        \cf2 val \cf4 anonymousRecipient = identities[recipient] ?: recipient\
        progressTracker.currentStep = GENERATING_TX\
        \cf2 val \cf4 txbuilder = TransactionBuilder(notary = \cf2 null\cf4 )\
\
        \cf2 val \cf4 (spendTX\cf2 , \cf4 keysForSigning) = \cf2 try \cf4 \{\
            Cash.generateSpend(serviceHub\cf2 ,\
                    \cf4 txbuilder\cf2 ,\
                    \cf4 amount\cf2 ,\
                    \cf4 anonymousRecipient\cf2 ,\
                    \cf4 emptySet())\
\
\
         \cf6 \cb3 //   var testw3 : Pair<TransactionBuilder, List<PublicKey>>\
        \cf4 \cb3 \} catch (e: InsufficientBalanceException) \{\
            \cf2 throw \cf4 CashException(\cf5 \cb3 "Insufficient cash for spend: \cf2 \cb3 $\{\cf4 e.message\cf2 \}\cf5 \cb3 "\cf2 \cb3 , \cf4 e)\
        \}\
\
\
        progressTracker.currentStep = SIGNING_TX\
        \cf2 val \cf4 trsx = serviceHub.signInitialTransaction(spendTX\cf2 , \cf4 keysForSigning)\
\
        progressTracker.currentStep = FINALISING_TX\
        \cf2 val \cf4 notarised2 = finaliseTx(trsx\cf2 , \cf4 setOf(recipient)\cf2 , \cf5 \cb3 "Unable to notarise spend"\cf4 \cb3 )\
        \cf2 return \cf4 Result(notarised2\cf2 , \cf4 anonymousRecipient)\
\
\
        subFlow(CashPaymentFlow(amount\cf2 , \cf4 recipient\cf2 , \cf4 anonymous))\
    \}\
\}\
\
}